import { useState } from 'react'

// Summary preview component - displays summary, highlights, and metadata
function SummaryPreview({ summary, highlights, meta, loading, extractedText }) {
  
  const handleCopyAllAsText = () => {
    let textContent = '='.repeat(60) + '\n'
    textContent += 'AI SUMMARY\n'
    textContent += '='.repeat(60) + '\n\n'
    
    // Add summary
    textContent += summary + '\n\n'
    
    // Add highlights if available
    if (highlights && highlights.length > 0) {
      textContent += '-'.repeat(60) + '\n'
      textContent += 'KEY HIGHLIGHTS\n'
      textContent += '-'.repeat(60) + '\n\n'
      highlights.forEach((highlight, idx) => {
        textContent += `${idx + 1}. ${highlight}\n`
      })
      textContent += '\n'
    }
    
    // Add metadata
    if (meta) {
      textContent += '-'.repeat(60) + '\n'
      textContent += 'METADATA\n'
      textContent += '-'.repeat(60) + '\n'
      if (meta.provider) textContent += `Provider: ${meta.provider}\n`
      if (meta.processingTime) textContent += `Processing Time: ${meta.processingTime}ms\n`
      if (meta.chunks) textContent += `Chunks: ${meta.chunks}\n`
      textContent += '\n'
    }
    
    textContent += '='.repeat(60) + '\n'
    textContent += 'Generated by Mind-Mesh AI\n'
    textContent += '='.repeat(60) + '\n'
    
    navigator.clipboard.writeText(textContent)
      .then(() => {
        alert('‚úÖ All content copied to clipboard!')
      })
      .catch(() => {
        alert('‚ùå Failed to copy. Please try again.')
      })
  }

  if (loading) {
    return (
      <div className="bg-white border border-gray-200 p-6 rounded-lg shadow-sm">
        <h2 className="text-xl font-semibold text-gray-800">Processing...</h2>
      </div>
    )
  }

  if (!summary) {
    return (
      <div className="bg-white border border-gray-200 p-6 rounded-lg shadow-sm">
        <div className="text-center py-16">
          <h3 className="text-lg font-medium text-gray-700 mb-2">Your summary will appear here...</h3>
          <p className="text-gray-500 text-sm">Upload a file, enter text, or provide a URL to get started</p>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* AI Summary Section */}
      <div className="bg-white border border-gray-200 p-6 rounded-lg shadow-sm">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold text-gray-800">üìù AI Summary</h2>
          <div className="flex items-center gap-2">
            {meta && meta.processingTime && (
              <span className="text-xs text-green-600 bg-green-50 px-3 py-1.5 rounded-full font-medium border border-green-200">
                ‚ö° {meta.processingTime}ms
              </span>
            )}
            {meta && meta.chunks > 0 && (
              <span className="text-xs text-gray-500 bg-gray-100 px-3 py-1 rounded-full">
                {meta.chunks} chunks
              </span>
            )}
          </div>
        </div>
        
        <div className="p-5 bg-blue-50 rounded-lg border border-blue-100 mb-4">
          <div className="prose max-w-none">
            {summary.split('\n\n').map((paragraph, idx) => {
              // Check if it's a bullet point
              if (paragraph.trim().startsWith('‚Ä¢') || paragraph.trim().startsWith('-') || paragraph.trim().startsWith('*')) {
                const items = paragraph.split('\n').filter(item => item.trim());
                return (
                  <ul key={idx} className="list-disc list-inside space-y-2 my-3">
                    {items.map((item, i) => (
                      <li key={i} className="text-gray-700 leading-relaxed">
                        {item.replace(/^[‚Ä¢\-*]\s*/, '')}
                      </li>
                    ))}
                  </ul>
                )
              }
              // Check if it's a numbered list
              if (/^\d+[\.)]\s/.test(paragraph.trim())) {
                const items = paragraph.split('\n').filter(item => item.trim());
                return (
                  <ol key={idx} className="list-decimal list-inside space-y-2 my-3">
                    {items.map((item, i) => (
                      <li key={i} className="text-gray-700 leading-relaxed">
                        {item.replace(/^\d+[\.)]\s*/, '')}
                      </li>
                    ))}
                  </ol>
                )
              }
              // Regular paragraph
              return paragraph.trim() ? (
                <p key={idx} className="text-gray-700 leading-relaxed mb-3">
                  {paragraph}
                </p>
              ) : null
            })}
          </div>
        </div>

        <button
          onClick={() => navigator.clipboard.writeText(summary)}
          className="px-3 py-2 text-xs bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors"
        >
          üìã Copy Summary
        </button>
      </div>

      {/* Key Highlights Section */}
      {highlights && highlights.length > 0 && (
        <div className="bg-white border border-gray-200 p-6 rounded-lg shadow-sm">
          <h3 className="text-lg font-semibold text-gray-800 mb-3">üí° Key Highlights</h3>
          <ul className="space-y-2">
            {highlights.map((highlight, idx) => (
              <li key={idx} className="flex items-start p-3 bg-yellow-50 rounded-lg border border-yellow-200">
                <span className="text-blue-600 mr-2 mt-1">‚Ä¢</span>
                <span className="text-gray-700 leading-relaxed">{highlight}</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Extracted Text Section */}
      {typeof extractedText === 'string' && extractedText.trim().length > 0 && (
        <div className="bg-white border border-gray-200 p-6 rounded-lg shadow-sm">
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-lg font-semibold text-gray-800">üìÑ Extracted Text</h3>
            <span className="text-xs text-gray-500">
              {extractedText.length.toLocaleString()} characters
            </span>
          </div>
          <div className="p-4 bg-gray-50 rounded-lg border border-gray-200 max-h-96 overflow-y-auto">
            <div className="prose prose-sm max-w-none">
              {extractedText.split('\n\n').map((section, idx) => {
                // Check if it's a heading
                if (section.trim().match(/^[A-Z\s]{3,}:?$/) || section.trim().startsWith('===') || section.trim().startsWith('###')) {
                  return (
                    <h4 key={idx} className="font-bold text-gray-900 text-sm mt-4 mb-2 pb-1 border-b border-gray-300">
                      {section.replace(/^[=#\s]+/, '').replace(/[=#\s]+$/, '')}
                    </h4>
                  )
                }
                // Check if it's a bullet list
                if (section.trim().startsWith('‚Ä¢') || section.trim().startsWith('-') || section.trim().startsWith('*')) {
                  const items = section.split('\n').filter(item => item.trim());
                  return (
                    <ul key={idx} className="list-disc list-inside space-y-1 my-2 pl-2">
                      {items.map((item, i) => (
                        <li key={i} className="text-gray-600 text-sm leading-relaxed">
                          {item.replace(/^[‚Ä¢\-*]\s*/, '')}
                        </li>
                      ))}
                    </ul>
                  )
                }
                // Check if it's a numbered list
                if (/^\d+[\.)]\s/.test(section.trim())) {
                  const items = section.split('\n').filter(item => item.trim());
                  return (
                    <ol key={idx} className="list-decimal list-inside space-y-1 my-2 pl-2">
                      {items.map((item, i) => (
                        <li key={i} className="text-gray-600 text-sm leading-relaxed">
                          {item.replace(/^\d+[\.)]\s*/, '')}
                        </li>
                      ))}
                    </ol>
                  )
                }
                // Check if it's a table row
                if (section.includes('|')) {
                  return (
                    <div key={idx} className="my-2 p-2 bg-white rounded border border-gray-300 overflow-x-auto">
                      <pre className="text-xs text-gray-600 whitespace-pre font-mono">{section}</pre>
                    </div>
                  )
                }
                // Regular paragraph
                return section.trim() ? (
                  <p key={idx} className="text-gray-600 text-sm leading-relaxed mb-2">
                    {section}
                  </p>
                ) : null
              })}
            </div>
          </div>
          <button
            onClick={() => navigator.clipboard.writeText(extractedText)}
            className="mt-3 px-3 py-2 text-xs bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
          >
            üìã Copy Extracted Text
          </button>
        </div>
      )}
    </div>
  )
}

export default SummaryPreview