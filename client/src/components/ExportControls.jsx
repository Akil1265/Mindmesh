import { generateSummaryVideo, downloadVideo } from '../utils/videoGenerator'
import { useState, useEffect } from 'react'

// Export controls component - filename input and format buttons
function ExportControls({ summary, onDownload, isDownloading }) {
  const [isGeneratingVideo, setIsGeneratingVideo] = useState(false)
  const [customFilename, setCustomFilename] = useState('')
  const [autoFilename, setAutoFilename] = useState('summary')
  const [isEditingFilename, setIsEditingFilename] = useState(false)
  
  // Auto-generate smart filename from summary content
  useEffect(() => {
    if (summary && summary.trim()) {
      const generated = generateSmartFilename(summary)
      setAutoFilename(generated)
    }
  }, [summary])
  
  // Generate smart filename from summary content (max 15 characters)
  const generateSmartFilename = (text) => {
    // Take first 15 characters of summary
    let filename = text.substring(0, 15).trim()
    
    // Remove special characters and replace spaces with hyphens
    filename = filename
      .toLowerCase()
      .replace(/[^\w\s-]/g, '') // Remove special chars
      .replace(/\s+/g, '-')      // Replace spaces with hyphens
      .replace(/-+/g, '-')       // Replace multiple hyphens with single
      .replace(/^-|-$/g, '')     // Remove leading/trailing hyphens
    
    // Add "by Mind-Mesh" suffix
    filename = filename + '-by-mind-mesh'
    
    return filename
  }
  
  const formats = [
    { key: 'pdf', label: 'PDF', icon: 'üìï', color: 'red' },
    { key: 'docx', label: 'Word', icon: 'üìò', color: 'blue' },
    { key: 'pptx', label: 'PowerPoint', icon: 'üìô', color: 'orange' },
    { key: 'txt', label: 'Text', icon: 'üìÑ', color: 'gray' },
    { key: 'png', label: 'Image', icon: 'üñºÔ∏è', color: 'green' },
    { key: 'video', label: 'Video', icon: 'üé•', color: 'purple' }
  ]

  const handleVideoExport = async () => {
    try {
      setIsGeneratingVideo(true)
      
      // Generate video with voiceover
      const videoResult = await generateSummaryVideo(summary, {
        title: 'AI Summary',
        backgroundColor: '#1e3a8a',
        textColor: '#ffffff',
        fontSize: 32,
      })
      
      // Use custom filename or auto-generated
      const filename = customFilename.trim() || autoFilename
      
      // Use the extension returned from video generation
      downloadVideo(videoResult.blob, `${filename}${videoResult.extension}`)
    } catch (error) {
      console.error('Video generation failed:', error)
      alert('Failed to generate video: ' + error.message)
    } finally {
      setIsGeneratingVideo(false)
    }
  }

  const getFinalFilename = () => {
    return customFilename.trim() || autoFilename
  }

  const handleCopyAllAsText = () => {
    // Copy summary as formatted text
    let textContent = '='.repeat(60) + '\n'
    textContent += 'üìÑ MIND-MESH SUMMARY\n'
    textContent += '='.repeat(60) + '\n\n'
    textContent += summary + '\n\n'
    textContent += '='.repeat(60) + '\n'
    textContent += 'Generated by Mind-Mesh AI\n'
    textContent += '='.repeat(60)
    
    navigator.clipboard.writeText(textContent)
    alert('‚úÖ Summary copied to clipboard!')
  }

  if (!summary) {
    return null
  }

  return (
    <div className="bg-white border border-gray-200 p-6 rounded-lg shadow-sm">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold text-gray-800">üíæ Export Formats</h3>
        {(isDownloading || isGeneratingVideo) && (
          <span className="text-xs text-blue-700 bg-blue-50 px-3 py-1 rounded-full border border-blue-200">
            {isGeneratingVideo ? 'Generating video...' : 'Preparing download‚Ä¶'}
          </span>
        )}
      </div>
      
      {/* Filename Display/Edit - Simple */}
      <div className="mb-4 p-3 bg-gray-50 rounded-lg border border-gray-200">
        <div className="flex items-center gap-3">
          <div className="flex-1">
            <label className="block text-xs text-gray-500 mb-1">
              Filename:
            </label>
            {isEditingFilename ? (
              <input
                type="text"
                value={customFilename || autoFilename}
                onChange={(e) => setCustomFilename(e.target.value)}
                className="w-full px-3 py-1.5 border border-blue-300 rounded-lg text-sm font-mono focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                autoFocus
              />
            ) : (
              <div className="w-full px-3 py-1.5 border border-gray-300 rounded-lg text-sm font-mono text-gray-700 bg-gray-50">
                {customFilename || autoFilename}
              </div>
            )}
          </div>
          <button
            onClick={() => setIsEditingFilename(!isEditingFilename)}
            className="mt-5 px-3 py-1.5 text-xs bg-white hover:bg-gray-100 text-gray-700 rounded-lg transition-colors font-medium border border-gray-300"
          >
            {isEditingFilename ? '‚úì Done' : '‚úèÔ∏è Edit'}
          </button>
        </div>
      </div>
      
      <p className="text-sm text-gray-600 mb-4">Pick a format. We'll generate a clean, share-ready file.</p>
      <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
        {formats.map((format) => {
          const accent =
            format.color === 'red'
              ? 'from-rose-50 to-red-50 border-red-200 hover:border-red-300'
              : format.color === 'blue'
              ? 'from-sky-50 to-blue-50 border-blue-200 hover:border-blue-300'
              : format.color === 'orange'
              ? 'from-amber-50 to-orange-50 border-orange-200 hover:border-orange-300'
              : format.color === 'green'
              ? 'from-emerald-50 to-green-50 border-green-200 hover:border-green-300'
              : format.color === 'purple'
              ? 'from-purple-50 to-violet-50 border-purple-200 hover:border-purple-300'
              : 'from-gray-50 to-slate-50 border-gray-200 hover:border-gray-300'
          const circle =
            format.color === 'red'
              ? 'bg-red-100 text-red-700 ring-1 ring-red-200'
              : format.color === 'blue'
              ? 'bg-blue-100 text-blue-700 ring-1 ring-blue-200'
              : format.color === 'orange'
              ? 'bg-orange-100 text-orange-700 ring-1 ring-orange-200'
              : format.color === 'green'
              ? 'bg-green-100 text-green-700 ring-1 ring-green-200'
              : format.color === 'purple'
              ? 'bg-purple-100 text-purple-700 ring-1 ring-purple-200'
              : 'bg-gray-100 text-gray-700 ring-1 ring-gray-200'
          const note =
            format.key === 'pdf'
              ? 'Best for printing'
              : format.key === 'docx'
              ? 'Edit in Word'
              : format.key === 'pptx'
              ? 'Present slides'
              : format.key === 'png'
              ? 'Share as image'
              : format.key === 'video'
              ? 'With voiceover'
              : 'Plain text'

          const handleClick = () => {
            if (format.key === 'video') {
              handleVideoExport()
            } else {
              const filename = getFinalFilename()
              onDownload(format.key, filename)
            }
          }

          const onKey = (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault()
              handleClick()
            }
          }

          return (
            <div
              key={format.key}
              role="button"
              tabIndex={0}
              onKeyDown={onKey}
              onClick={handleClick}
              aria-label={`Download ${format.label}`}
              className={`group relative overflow-hidden rounded-xl border ${accent} bg-gradient-to-br p-4 shadow-sm transition-all duration-200
                hover:shadow-md hover:-translate-y-0.5 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-200
                ${(isDownloading || isGeneratingVideo) ? 'pointer-events-none opacity-60' : ''}`}
              title={`Download as ${format.label}`}
            >
              <div className="flex flex-col items-center text-center gap-2">
                <div className={`h-12 w-12 flex items-center justify-center rounded-full ${circle}`}>
                  <span className="text-2xl leading-none">{format.icon}</span>
                </div>
                <div>
                  <div className="text-sm font-semibold text-gray-800">{format.label}</div>
                  <div className="text-xs text-gray-500">{note}</div>
                </div>
              </div>
              <div className="pointer-events-none absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                <div className="absolute -inset-1 bg-gradient-to-r from-transparent via-white/40 to-transparent blur-md" />
              </div>
            </div>
          )
        })}
      </div>
      
      {/* Copy Summary Button */}
      <div className="mt-4 pt-4 border-t border-gray-200">
        <button
          onClick={handleCopyAllAsText}
          className="w-full px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg font-medium hover:from-blue-600 hover:to-blue-700 transition-all duration-200 shadow-sm hover:shadow-md flex items-center justify-center gap-2"
        >
          <span className="text-lg">üìã</span>
          <span>Copy Summary as Text</span>
        </button>
      </div>
    </div>
  )
}

export default ExportControls
